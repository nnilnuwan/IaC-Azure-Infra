trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  location: 'Southeast Asia'
  resourceGroup: 'backend-storage'
  storageAccount: 'adostorage01'
  containerName: 'backend'
  tfstateKey: 'ado_terraform_demo.tfstate'
  backendServiceConnection: '25-Sponsorship-A(4)(0dff3de7-eade-40a0-822b-87187ef66758)'
  planServiceConnection: '25-Sponsorship-A(4)(0dff3de7-eade-40a0-822b-87187ef66758)'
  applyServiceConnection: '25-Sponsorship-A(4)(0dff3de7-eade-40a0-822b-87187ef66758)'
  tfWorkingDir: '$(System.DefaultWorkingDirectory)/Resource Group'

steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: '1.10.0'

- task: TerraformTaskV4@4
  displayName: 'Terraform Init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendAzureRmUseEntraIdForAuthentication: true
    backendServiceArm: $(backendServiceConnection)
    backendAzureRmResourceGroupName: $(resourceGroup)
    backendAzureRmStorageAccountName: $(storageAccount)
    backendAzureRmContainerName: $(containerName)
    backendAzureRmKey: $(tfstateKey)
    workingDirectory: $(tfWorkingDir)

- task: TerraformTaskV4@4
  displayName: 'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    environmentServiceNameAzureRM: $(planServiceConnection)
    workingDirectory: $(tfWorkingDir)

- task: TerraformTaskV4@4
  displayName: 'Terraform Apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    environmentServiceNameAzureRM: $(applyServiceConnection)
    workingDirectory: $(tfWorkingDir)



